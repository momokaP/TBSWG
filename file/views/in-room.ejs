<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game Room</title>
    <style>
        body {
            height: 100vh;           /* 화면 전체 높이 사용 */
            background: linear-gradient(to right, #243447, #36D1DC);
        }

        /* 전체 컨테이너 */
        .container {
            max-width: 1280px;
            margin: 0 auto;
            padding: 1rem;
        }

        /* 그리드 시스템 */
        .grid-container {
            display: grid;
            grid-template-columns: 1fr 2fr; /* 첫 번째 1/3, 두 번째 2/3 */
            gap: 1rem;
        }

        /* 유저 패널 */
        .user-panel {
            background-color: #1a202c;
            padding: 1rem;
            border-radius: 0.375rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            color: white;
        }

        .user-panel h2 {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .user-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        /* 채팅 패널 */
        .chat-panel {
            background-color: #1a202c;
            padding: 1rem;
            border-radius: 0.375rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            color: white;
        }

        .chat-box {
            height: 16rem;
            overflow-y: auto;
            margin-bottom: 1rem;
            padding: 0.5rem;
            border: 1px solid #e2e8f0;
            border-radius: 0.375rem;
        }

        .chat-form {
            display: flex;
        }

        .chat-input {
            flex-grow: 1;
            margin-right: 0.5rem;
            padding: 0.5rem;
            border: 1px solid #e2e8f0;
            border-radius: 0.375rem;
        }

        .chat-send-button {
            padding: 12px 24px;  /* px-4, py-2에 해당하는 크기 */
            background-color: #3b82f6;
            color: white;
            border-radius: 0.375rem;
            border: none; /* 테두리 없애기 */
            outline: none; /* 포커스 시 생기는 윤곽선 제거 */
            font-weight: bold;
        }

        .chat-send-button:hover {
            opacity: 0.8; /* 버튼에 마우스를 올렸을 때 약간 투명하게 */
        }

        /* 버튼 패널 */
        .button-panel {
            margin-top: 1rem;
            display: flex;
            justify-content: space-between;
        }

        .start-button,
        .leave-button,
        .delete-button {
            padding: 12px 24px;  /* px-4, py-2에 해당하는 크기 */
            border-radius: 0.375rem;
            font-weight: bold;
            border: none; /* 테두리 없애기 */
            outline: none; /* 포커스 시 생기는 윤곽선 제거 */
        }

        .start-button:hover,
        .leave-button:hover,
        .delete-button:hover {
            opacity: 0.8; /* 버튼에 마우스를 올렸을 때 약간 투명하게 */
        }

        .start-button {
            background-color: #10b981;
            color: white;
        }

        .leave-button {
            background-color: #ef9c44;
            color: white;
        }

        .delete-button {
            background-color: #ef4444;
            color: white;
            display: none; /* 기본적으로 숨김 */
        }

        /* hidden 클래스 처리 */
        .hidden {
            display: none;
        }

        .header-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 0 15px;
            position: relative;
        }

        .header-border {
            background-color: #1a202c;
            color: white;
            padding: 1rem 0;
        }

        .logo {
            color: white;
        }

        header {
            display: block; 
            width: 100%;
            margin-bottom: 20px; /* header와 main 사이의 간격 */
            text-align: center;  /* 중앙 정렬 */
        }
        header nav {
            width: 100%;
            padding: 1em 0;
        }

        header nav a {
            font-size: 1.5em;
            font-weight: bold;
        }

        /* 방 이름 패널 스타일 */
        .room-name-panel {
            background-color: #1a202c;  /* 패널 배경 색상 */
            color: white;
            padding: 0.25rem;  /* 패딩을 절반으로 줄임 */
            border-radius: 0.375rem;
            margin-bottom: 1rem;  /* 아래쪽 여백 추가 */
            text-align: center;
            max-width: 75%;  /* 패널 너비를 50%로 제한 */
            position: relative;  /* 상대 위치 설정 */
            left: 50%;  /* 수평 중앙 정렬 */
            transform: translateX(-50%);  /* 중앙 정렬을 위해 X축으로 -50% 이동 */
        }

        .room-name-panel h1 {
            font-size: 1.5rem;  /* 방 이름 글꼴 크기를 줄임 */
            font-weight: 600;
        }
        
        /* 사용자 목록 항목 스타일 */
        .user-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 0.5rem;
        }
    </style>
</head>
<body>

    <header class="header-border">
        <div class="header-container ">
          <nav>
            <a href="/" class="logo">TBSWB</a>
          </nav>
        </div>
    </header>

    <div class="container">
        <!-- 방 이름 패널 추가 -->
        <div class="room-name-panel">
            <h1><%= room.hostname %>의 <%= room.roomname %>방</h1> <!-- 서버에서 전달한 방 이름 표시 -->
        </div>

        <div class="grid-container">
            <div class="user-panel">
                <h2>Users</h2>
                <ul id="userList" class="user-list">
                    <% room.usernames.forEach(function(username) { %>
                        <li class="user-item">
                            <span class="username"><%= username %></span>
                        </li>
                    <% }); %>
                </ul>
            </div>
            <div class="chat-panel">
                <div id="chatBox" class="chat-box"></div>
                <form id="chatForm" class="chat-form">
                    <input type="text" id="chatInput" class="chat-input" placeholder="Type your message...">
                    <button type="submit" class="chat-send-button">Send</button>
                </form>
            </div>
        </div>
        <div class="button-panel">
            <button id="startButton" class="start-button hidden">Start</button>
            <button id="deleteRoomButton" class="delete-button hidden">Delete Room</button>
            <button id="leaveButton" class="leave-button">Leave Room</button>
        </div>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const userList = document.getElementById('userList');
        const startButton = document.getElementById('startButton');

        const socket = io();  // 서버에 연결

        const roomId = "<%= room._id %>";  // 서버에서 전달받은 방 ID
        const currentUser = "<%= username %>";

        let currentRoom = { 
            messages: []  // 채팅 기록을 저장할 배열
        };

        console.log(roomId);
        console.log(currentUser);

        // 방에 입장
        socket.emit('joinRoom', roomId, currentUser);

        // 사용자 추가 함수
        function addUser(username) {
            const li = document.createElement('li');
            li.classList.add('user-item');

            // 사용자 이름 표시
            const usernameSpan = document.createElement('span');
            usernameSpan.classList.add('username');
            usernameSpan.textContent = username;

            // 요소 연결
            li.appendChild(usernameSpan);
            userList.appendChild(li);
        }

        // 사용자 제거 함수
        function removeUser(username) {
            const userItems = userList.getElementsByClassName('user-item');
            for (let i = 0; i < userItems.length; i++) {
                const usernameElement = userItems[i].querySelector('.username');
                if (usernameElement && usernameElement.textContent === username) {
                    userItems[i].remove(); // 사용자 항목 삭제
                    break;
                }
            }
        }

        // 사용자 목록 업데이트 수신
        socket.on('update user list', function (usernames) {
            userList.innerHTML = ''; // 목록 초기화
            usernames.forEach(addUser); // 사용자 추가
        });

        socket.on('room full', function(roomId) {
            alert(`방 ${roomId}가 가득 차서 더 이상 입장할 수 없습니다.`);
            window.location.href = '/room/list-room';  // 방 목록 페이지로 리디렉션
        });

        // 클라이언트에서 방 삭제 처리
        socket.on('roomDeleted', (roomId) => {
            alert(`방 ${roomId}이 삭제되었습니다.`);
            window.location.href = '/room/list-room';  // 방 목록 페이지로 리디렉션
        });

        // 서버에서 메시지 기록을 받으면 UI 업데이트
        socket.on('chat history', function(messages) {
            currentRoom.messages = messages;  // 기존 메시지 기록을 가져와서 저장
            renderChat();  // 메시지 렌더링 함수 호출
        });

        // 서버에서 새로운 메시지를 받으면 UI 업데이트
        socket.on('chat message', function(message) {
            console.log(message);
            currentRoom.messages.push(message);  // 새로운 메시지 추가
            renderChat();  // 메시지 표시 업데이트
        });

        socket.on("redirectToGame", () => {
            window.location.href = "/game"; // /game 경로로 리디렉션
        });

        // 메시지 렌더링 함수
        function renderChat() {
            const chatBox = document.getElementById('chatBox');
            chatBox.innerHTML = '';  // 기존 채팅 내용 비우기
            currentRoom.messages.forEach(message => {
                if (message.user && message.text) {  // 유효한 메시지만 렌더링
                    const p = document.createElement('p');
                    p.textContent = `${message.user}: ${message.text}`;
                    chatBox.appendChild(p);
                }
            });
            chatBox.scrollTop = chatBox.scrollHeight;  // 최신 메시지가 보이도록 스크롤
        }

        // 메시지 전송 버튼 클릭 시
        document.getElementById('chatForm').addEventListener('submit', function(e) {
            e.preventDefault();  // 기본 form 제출 동작을 방지

            const msgText = document.getElementById('chatInput').value;
            if (msgText.trim() !== '') {
                const message = {
                    user: currentUser,
                    text: msgText
                };
                socket.emit('chat message', roomId, message);  // 서버로 메시지 전송
                document.getElementById('chatInput').value = '';  // 입력 필드 비우기
            }
        });

        document.getElementById('leaveButton').addEventListener('click', function(e) {            
            // 페이지를 방 목록 페이지로 이동
            window.location.href = '/room/list-room'; // 이 부분은 방을 떠난 후 리다이렉션
        });

        if ("<%= isHost %>" === 'true') {  // 문자열 'true'와 비교
            const deleteButton = document.getElementById('deleteRoomButton');
    
            if (startButton) {
                startButton.classList.remove('hidden'); // hidden 클래스를 제거
                startButton.style.display = 'inline-block'; // 강제로 표시
            }

            if (deleteButton) {
                deleteButton.classList.remove('hidden'); // hidden 클래스를 확실히 제거
                deleteButton.style.display = 'inline-block'; // display를 강제로 inline-block으로 설정
            }
        }

        document.getElementById('deleteRoomButton').addEventListener('click', function() {
            console.log("삭제");
            // 방 삭제 요청 서버로 보내기
            socket.emit('deleteRoom', roomId);  // 서버로 방 삭제 요청

            // 방 삭제 후 방 목록으로 이동 (방 삭제 후 페이지 이동)
            window.location.href = '/room/list-room';  // 또는 '/room/list' 등 방 목록 페이지로 리디렉션
        });

        document.getElementById('startButton').addEventListener('click', function() {
            if ("<%= isHost %>" === 'true'){
                console.log("시작");
                socket.emit('gamestart', roomId, currentUser);
            }
        });

        // 페이지가 떠날 때 방 떠나는 요청 처리
        window.addEventListener('unload', function() {
            socket.emit('leaveRoom', roomId, currentUser);
        });
    </script>
</body>
</html>

